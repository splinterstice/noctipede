apiVersion: batch/v1
kind: CronJob
metadata:
  name: noctipede-crawler-nfs
  namespace: noctipede
spec:
  schedule: "*/30 * * * *"
  jobTemplate:
    spec:
      template:
        spec:
          initContainers:
          - name: wait-for-services
            image: busybox:1.35
            command: ['sh', '-c']
            args:
            - |
              echo "üîç Waiting for required services..."
              until nc -z mariadb 3306; do
                echo "‚è≥ MariaDB not ready, waiting..."
                sleep 5
              done
              echo "‚úÖ MariaDB is ready!"
              
              until nc -z minio 9000; do
                echo "‚è≥ MinIO not ready, waiting..."
                sleep 5
              done
              echo "‚úÖ MinIO is ready!"
              
              until nc -z tor-proxy 9150; do
                echo "‚è≥ Tor proxy not ready, waiting..."
                sleep 5
              done
              echo "‚úÖ Tor proxy is ready!"
              
              until nc -z i2p-proxy 4444; do
                echo "‚è≥ I2P proxy not ready, waiting..."
                sleep 5
              done
              echo "‚úÖ I2P proxy is ready!"
              
              until nc -z noctipede-portal-service 8080; do
                echo "‚è≥ Portal service not ready, waiting..."
                sleep 5
              done
              echo "‚úÖ Portal service is ready!"
          - name: verify-sites-file
            image: busybox:1.35
            command: ['sh', '-c']
            args:
            - |
              echo "üìã Verifying sites.txt file..."
              if [ -f /nfs-sites/sites.txt ]; then
                echo "‚úÖ Found sites.txt with $(wc -l < /nfs-sites/sites.txt) sites"
                echo "üìÑ First 5 sites:"
                head -5 /nfs-sites/sites.txt
              else
                echo "‚ùå sites.txt not found!"
                echo "üìÅ /nfs-sites directory contents:"
                ls -la /nfs-sites/
                exit 1
              fi
            volumeMounts:
            - name: nfs-sites
              mountPath: /nfs-sites
              
          containers:
          - name: noctipede-crawler
            image: ghcr.io/splinterstice/noctipede:latest
            imagePullPolicy: Always
            command: ["sh", "-c"]
            args:
            - |
              echo "üöÄ Starting Noctipede Crawler with NFS sites..."
              cd /app
              
              # Use NFS-mounted sites.txt
              export SITES_FILE_PATH=/nfs-sites/sites.txt
              
              echo "üìã Using sites file: $SITES_FILE_PATH"
              echo "üìä Total sites to crawl: $(wc -l < $SITES_FILE_PATH)"
              
              # Wait for comprehensive readiness (not just port checks)
              echo "üîç Checking comprehensive system readiness..."
              until curl -s http://noctipede-portal-service:8080/api/readiness | grep -q '"ready_for_crawling":true'; do
                echo "‚è≥ System not ready for crawling, waiting..."
                curl -s http://noctipede-portal-service:8080/api/readiness | grep -o '"readiness_summary":"[^"]*"' || echo "Unable to get readiness status"
                sleep 30
              done
              echo "‚úÖ System is ready for crawling!"
              
              # Start crawler with readiness-aware manager
              PYTHONPATH=/app python -m crawlers.manager
              
            envFrom:
            - configMapRef:
                name: noctipede-config
            - secretRef:
                name: noctipede-secrets
            env:
            - name: SITES_FILE_PATH
              value: "/nfs-sites/sites.txt"
            - name: LOG_LEVEL
              value: "INFO"
            - name: OLLAMA_KEEP_ALIVE
              value: "30s"
            - name: OLLAMA_CONCURRENT_REQUESTS
              value: "3"  # Allow more concurrent AI requests
            - name: AI_MODEL_UNLOAD_AFTER_USE
              value: "true"
            - name: CONTENT_ANALYSIS_ENABLED
              value: "true"  # Enable content analysis
            - name: IMAGE_ANALYSIS_ENABLED
              value: "true"  # Enable image analysis
            volumeMounts:
            - name: output-data
              mountPath: /app/output
            - name: log-data
              mountPath: /app/logs
            - name: data-volume
              mountPath: /app/data
            - name: nfs-sites
              mountPath: /nfs-sites
              
          volumes:
          - name: output-data
            persistentVolumeClaim:
              claimName: noctipede-output-pvc
          - name: log-data
            persistentVolumeClaim:
              claimName: noctipede-logs-pvc
          - name: data-volume
            persistentVolumeClaim:
              claimName: noctipede-data-pvc
          - name: nfs-sites
            persistentVolumeClaim:
              claimName: noctipede-sites-pvc
              
          restartPolicy: OnFailure
