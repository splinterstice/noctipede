apiVersion: apps/v1
kind: Deployment
metadata:
  name: noctipede-app
  namespace: noctipede
  labels:
    app: noctipede-app
    component: crawler
spec:
  replicas: 1
  selector:
    matchLabels:
      app: noctipede-app
  template:
    metadata:
      labels:
        app: noctipede-app
        component: crawler
    spec:
      initContainers:
      # Initialize sites.txt file
      - name: init-sites-data
        image: busybox:1.35
        command: ['/bin/sh', '-c']
        args:
        - |
          echo "üîß Creating sites.txt file..."
          cat > /data/sites.txt << 'EOF'
          https://httpbin.org/
          https://example.com/
          https://httpbin.org/json
          https://httpbin.org/html
          https://httpbin.org/robots.txt
          EOF
          echo "‚úÖ sites.txt created with $(wc -l < /data/sites.txt) sites"
          ls -la /data/
          cat /data/sites.txt
        volumeMounts:
        - name: data-volume
          mountPath: /data
      # Fix permissions for log directory
      - name: fix-log-permissions
        image: busybox:1.35
        command: ['/bin/sh', '-c']
        args:
        - |
          echo "üîß Fixing log directory permissions..."
          mkdir -p /app/logs /app/output
          chmod 777 /app/logs /app/output
          echo "‚úÖ Permissions fixed"
        volumeMounts:
        - name: logs-volume
          mountPath: /app/logs
        - name: output-volume
          mountPath: /app/output
      # Simple proxy health monitoring using nc
      - name: wait-for-proxies
        image: busybox:1.35
        command: ['sh', '-c']
        args:
        - |
          set -eux
          echo "üîç Starting proxy health checks..."
          
          # Test Tor proxy - just check if SOCKS5 port is responding
          echo "üßÖ Testing Tor proxy..."
          tor_ready=false
          for attempt in $(seq 1 5); do
            echo "Tor test attempt $attempt/5..."
            if nc -z tor-proxy 9150 >/dev/null 2>&1; then
              echo "‚úÖ Tor proxy port responding!"
              tor_ready=true
              break
            fi
            echo "‚è≥ Waiting for Tor proxy..."
            sleep 10
          done
          
          if [ "$tor_ready" = "false" ]; then
            echo "‚ùå Tor proxy port not responding after 5 attempts"
            exit 1
          fi
          
          # Test I2P proxy - check console port
          echo "üåê Testing I2P proxy..."
          i2p_ready=false
          for attempt in $(seq 1 3); do
            echo "I2P test attempt $attempt/3..."
            if nc -z i2p-proxy 7070 >/dev/null 2>&1; then
              echo "‚úÖ I2P console responding!"
              i2p_ready=true
              break
            fi
            echo "‚è≥ Waiting for I2P..."
            sleep 15
          done
          
          if [ "$i2p_ready" = "false" ]; then
            echo "‚ö†Ô∏è  I2P not ready yet (normal - can take 10+ minutes to bootstrap)"
            echo "üîÑ Continuing anyway - applications will handle I2P gracefully"
          fi
          
          echo "üéâ Proxy health checks completed!"
      containers:
      - name: noctipede-app
        image: ghcr.io/splinterstice/noctipede:latest
        imagePullPolicy: Always
        command: ["sh", "-c", "cd /app && PYTHONPATH=/app python -m crawlers.main"]
        envFrom:
        - configMapRef:
            name: noctipede-config
        - secretRef:
            name: noctipede-secrets
        volumeMounts:
        - name: data-volume
          mountPath: /app/data
        - name: output-volume
          mountPath: /app/output
        - name: logs-volume
          mountPath: /app/logs
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 2000m
            memory: 4Gi
        livenessProbe:
          exec:
            command:
            - pgrep
            - -f
            - "python.*crawlers.main"
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
      volumes:
      - name: data-volume
        persistentVolumeClaim:
          claimName: noctipede-sites-pvc
      - name: output-volume
        persistentVolumeClaim:
          claimName: noctipede-output-pvc
      - name: logs-volume
        persistentVolumeClaim:
          claimName: noctipede-logs-pvc
      restartPolicy: Always

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: noctipede-portal
  namespace: noctipede
  labels:
    app: noctipede-portal
    component: web
spec:
  replicas: 1
  selector:
    matchLabels:
      app: noctipede-portal
  template:
    metadata:
      labels:
        app: noctipede-portal
        component: web
    spec:
      initContainers:
      # Simple proxy health monitoring using nc
      - name: wait-for-proxies
        image: busybox:1.35
        command: ['sh', '-c']
        args:
        - |
          set -eux
          echo "üîç Starting proxy health checks..."
          
          # Test Tor proxy - just check if SOCKS5 port is responding
          echo "üßÖ Testing Tor proxy..."
          tor_ready=false
          for attempt in $(seq 1 5); do
            echo "Tor test attempt $attempt/5..."
            if nc -z tor-proxy 9150 >/dev/null 2>&1; then
              echo "‚úÖ Tor proxy port responding!"
              tor_ready=true
              break
            fi
            echo "‚è≥ Waiting for Tor proxy..."
            sleep 10
          done
          
          if [ "$tor_ready" = "false" ]; then
            echo "‚ùå Tor proxy port not responding after 5 attempts"
            exit 1
          fi
          
          # Test I2P proxy - check console port
          echo "üåê Testing I2P proxy..."
          i2p_ready=false
          for attempt in $(seq 1 3); do
            echo "I2P test attempt $attempt/3..."
            if nc -z i2p-proxy 7070 >/dev/null 2>&1; then
              echo "‚úÖ I2P console responding!"
              i2p_ready=true
              break
            fi
            echo "‚è≥ Waiting for I2P..."
            sleep 15
          done
          
          if [ "$i2p_ready" = "false" ]; then
            echo "‚ö†Ô∏è  I2P not ready yet (normal - can take 10+ minutes to bootstrap)"
            echo "üîÑ Continuing anyway - portal will handle I2P gracefully"
          fi
          
          echo "üéâ Proxy health checks completed!"
      containers:
      - name: noctipede-portal
        image: ghcr.io/splinterstice/noctipede:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        command: ["sh", "-c", "cd /app && PYTHONPATH=/app uvicorn portal.main_enhanced:app --host 0.0.0.0 --port 8080"]
        envFrom:
        - configMapRef:
            name: noctipede-config
        - secretRef:
            name: noctipede-secrets
        volumeMounts:
        - name: output-volume
          mountPath: /app/output
        - name: logs-volume
          mountPath: /app/logs
        resources:
          requests:
            cpu: 250m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 2Gi
        livenessProbe:
          httpGet:
            path: /api/health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
      volumes:
      - name: output-volume
        persistentVolumeClaim:
          claimName: noctipede-output-pvc
      - name: logs-volume
        persistentVolumeClaim:
          claimName: noctipede-logs-pvc
      restartPolicy: Always
